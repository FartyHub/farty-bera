/* tslint:disable */
/* eslint-disable */
/**
 * Farty Bera API
 * Farty Bera API Specification
 *
 * The version of the OpenAPI document: 0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export const Applications = {
    Bera: 'Farty Bera',
    Claw: 'Farty Claw',
    Drop: 'Farty Drop',
    Slash: 'Farty Slash',
    Tower: 'Farty Tower'
} as const;

export type Applications = typeof Applications[keyof typeof Applications];


/**
 * 
 * @export
 * @interface BulkSoleCreateScoreDto
 */
export interface BulkSoleCreateScoreDto {
    /**
     * 
     * @type {Array<SoleCreateScoreDto>}
     * @memberof BulkSoleCreateScoreDto
     */
    'soleCreateScoreDto': Array<SoleCreateScoreDto>;
}
/**
 * 
 * @export
 * @interface CheckInviteCodeDto
 */
export interface CheckInviteCodeDto {
    /**
     * 
     * @type {string}
     * @memberof CheckInviteCodeDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CheckInviteCodeDto
     */
    'inviteCode': string;
}
/**
 * 
 * @export
 * @interface CreateProjectInviteDto
 */
export interface CreateProjectInviteDto {
    /**
     * 
     * @type {string}
     * @memberof CreateProjectInviteDto
     */
    'inviteCode': string;
    /**
     * 
     * @type {string}
     * @memberof CreateProjectInviteDto
     */
    'name'?: string;
    /**
     * 
     * @type {number}
     * @memberof CreateProjectInviteDto
     */
    'inviteCodeLimit'?: number;
}
/**
 * 
 * @export
 * @interface CreateScoreDto
 */
export interface CreateScoreDto {
    /**
     * 
     * @type {string}
     * @memberof CreateScoreDto
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof CreateScoreDto
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof CreateScoreDto
     */
    'message': string;
    /**
     * 
     * @type {number}
     * @memberof CreateScoreDto
     */
    'value': number;
    /**
     * 
     * @type {Applications}
     * @memberof CreateScoreDto
     */
    'game': Applications;
    /**
     * 
     * @type {string}
     * @memberof CreateScoreDto
     */
    'userAddress': string;
    /**
     * 
     * @type {string}
     * @memberof CreateScoreDto
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof CreateScoreDto
     */
    'hash': string;
}


/**
 * 
 * @export
 * @interface CreateUserDto
 */
export interface CreateUserDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserDto
     */
    'usedInviteCode'?: string;
}
/**
 * 
 * @export
 * @interface CreateUserTaskDto
 */
export interface CreateUserTaskDto {
    /**
     * 
     * @type {string}
     * @memberof CreateUserTaskDto
     */
    'taskId': string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTaskDto
     */
    'deletedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTaskDto
     */
    'oauth_token'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTaskDto
     */
    'oauth_verifier'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTaskDto
     */
    'oauth_token_secret'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof CreateUserTaskDto
     */
    'discordToken'?: string | null;
}
/**
 * 
 * @export
 * @interface OAuthResponseDto
 */
export interface OAuthResponseDto {
    /**
     * 
     * @type {string}
     * @memberof OAuthResponseDto
     */
    'url': string;
    /**
     * 
     * @type {string}
     * @memberof OAuthResponseDto
     */
    'oauth_token': string;
    /**
     * 
     * @type {string}
     * @memberof OAuthResponseDto
     */
    'oauth_token_secret': string;
    /**
     * 
     * @type {string}
     * @memberof OAuthResponseDto
     */
    'oauth_callback_confirmed': string;
    /**
     * 
     * @type {string}
     * @memberof OAuthResponseDto
     */
    'oauth_verifier'?: string;
}
/**
 * 
 * @export
 * @interface ProjectInvite
 */
export interface ProjectInvite {
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof ProjectInvite
     */
    'inviteCode': string;
    /**
     * 
     * @type {number}
     * @memberof ProjectInvite
     */
    'inviteCodeLimit': number;
}
/**
 * 
 * @export
 * @interface Score
 */
export interface Score {
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {number}
     * @memberof Score
     */
    'value': number;
    /**
     * 
     * @type {Applications}
     * @memberof Score
     */
    'game': Applications;
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'userAddress': string;
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof Score
     */
    'rewards': string;
}


/**
 * 
 * @export
 * @interface SignDto
 */
export interface SignDto {
    /**
     * 
     * @type {string}
     * @memberof SignDto
     */
    'key': string;
    /**
     * 
     * @type {string}
     * @memberof SignDto
     */
    'signature': string;
    /**
     * 
     * @type {string}
     * @memberof SignDto
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface SoleCreateScoreDto
 */
export interface SoleCreateScoreDto {
    /**
     * 
     * @type {number}
     * @memberof SoleCreateScoreDto
     */
    'value': number;
    /**
     * 
     * @type {Applications}
     * @memberof SoleCreateScoreDto
     */
    'game': Applications;
    /**
     * 
     * @type {string}
     * @memberof SoleCreateScoreDto
     */
    'userAddress': string;
    /**
     * 
     * @type {string}
     * @memberof SoleCreateScoreDto
     */
    'time': string;
    /**
     * 
     * @type {string}
     * @memberof SoleCreateScoreDto
     */
    'hash'?: string;
    /**
     * 
     * @type {string}
     * @memberof SoleCreateScoreDto
     */
    'rewards'?: string;
}


/**
 * 
 * @export
 * @interface Task
 */
export interface Task {
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Task
     */
    'type': string;
    /**
     * 
     * @type {number}
     * @memberof Task
     */
    'value': number;
    /**
     * 
     * @type {boolean}
     * @memberof Task
     */
    'isDone'?: boolean;
}
/**
 * 
 * @export
 * @interface UpdateUserDto
 */
export interface UpdateUserDto {
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'createdAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'updatedAt'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'deletedAt'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'address'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'inviteCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    'inviteCodeLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'usedInviteCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    'fartyHighScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    'fartyGamesPlayed'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    'tasksScore'?: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateUserDto
     */
    'honeyScore'?: number;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'twitterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof UpdateUserDto
     */
    'discordId'?: string;
}
/**
 * 
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'address': string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'inviteCode': string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'inviteCodeLimit'?: number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'usedInviteCode'?: string;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'fartyHighScore': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'fartyGamesPlayed': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'tasksScore': number;
    /**
     * 
     * @type {number}
     * @memberof User
     */
    'honeyScore': number;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'displayName'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'twitterId'?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    'discordId'?: string;
}
/**
 * 
 * @export
 * @interface UserTask
 */
export interface UserTask {
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    'createdAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    'updatedAt': string;
    /**
     * 
     * @type {string}
     * @memberof UserTask
     */
    'deletedAt': string | null;
    /**
     * 
     * @type {number}
     * @memberof UserTask
     */
    'value': number;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetData: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async appControllerGetData(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.appControllerGetData(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.appControllerGetData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        appControllerGetData(options?: any): AxiosPromise<void> {
            return localVarFp.appControllerGetData(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public appControllerGetData(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).appControllerGetData(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * InviteCodeApi - axios parameter creator
 * @export
 */
export const InviteCodeApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CheckInviteCodeDto} checkInviteCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteCodeControllerCheckInviteCode: async (checkInviteCodeDto: CheckInviteCodeDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'checkInviteCodeDto' is not null or undefined
            assertParamExists('inviteCodeControllerCheckInviteCode', 'checkInviteCodeDto', checkInviteCodeDto)
            const localVarPath = `/api/invite-code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(checkInviteCodeDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InviteCodeApi - functional programming interface
 * @export
 */
export const InviteCodeApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InviteCodeApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CheckInviteCodeDto} checkInviteCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inviteCodeControllerCheckInviteCode(checkInviteCodeDto: CheckInviteCodeDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inviteCodeControllerCheckInviteCode(checkInviteCodeDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['InviteCodeApi.inviteCodeControllerCheckInviteCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * InviteCodeApi - factory interface
 * @export
 */
export const InviteCodeApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InviteCodeApiFp(configuration)
    return {
        /**
         * 
         * @param {CheckInviteCodeDto} checkInviteCodeDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inviteCodeControllerCheckInviteCode(checkInviteCodeDto: CheckInviteCodeDto, options?: any): AxiosPromise<User> {
            return localVarFp.inviteCodeControllerCheckInviteCode(checkInviteCodeDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InviteCodeApi - object-oriented interface
 * @export
 * @class InviteCodeApi
 * @extends {BaseAPI}
 */
export class InviteCodeApi extends BaseAPI {
    /**
     * 
     * @param {CheckInviteCodeDto} checkInviteCodeDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InviteCodeApi
     */
    public inviteCodeControllerCheckInviteCode(checkInviteCodeDto: CheckInviteCodeDto, options?: RawAxiosRequestConfig) {
        return InviteCodeApiFp(this.configuration).inviteCodeControllerCheckInviteCode(checkInviteCodeDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ProjectInvitesApi - axios parameter creator
 * @export
 */
export const ProjectInvitesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateProjectInviteDto} createProjectInviteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInviteControllerCreate: async (createProjectInviteDto: CreateProjectInviteDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createProjectInviteDto' is not null or undefined
            assertParamExists('projectInviteControllerCreate', 'createProjectInviteDto', createProjectInviteDto)
            const localVarPath = `/api/project-invites`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createProjectInviteDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ProjectInvitesApi - functional programming interface
 * @export
 */
export const ProjectInvitesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ProjectInvitesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateProjectInviteDto} createProjectInviteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async projectInviteControllerCreate(createProjectInviteDto: CreateProjectInviteDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ProjectInvite>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.projectInviteControllerCreate(createProjectInviteDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ProjectInvitesApi.projectInviteControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ProjectInvitesApi - factory interface
 * @export
 */
export const ProjectInvitesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ProjectInvitesApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateProjectInviteDto} createProjectInviteDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        projectInviteControllerCreate(createProjectInviteDto: CreateProjectInviteDto, options?: any): AxiosPromise<ProjectInvite> {
            return localVarFp.projectInviteControllerCreate(createProjectInviteDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ProjectInvitesApi - object-oriented interface
 * @export
 * @class ProjectInvitesApi
 * @extends {BaseAPI}
 */
export class ProjectInvitesApi extends BaseAPI {
    /**
     * 
     * @param {CreateProjectInviteDto} createProjectInviteDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProjectInvitesApi
     */
    public projectInviteControllerCreate(createProjectInviteDto: CreateProjectInviteDto, options?: RawAxiosRequestConfig) {
        return ProjectInvitesApiFp(this.configuration).projectInviteControllerCreate(createProjectInviteDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ScoresApi - axios parameter creator
 * @export
 */
export const ScoresApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateScoreDto} createScoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scoreControllerCreate: async (createScoreDto: CreateScoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createScoreDto' is not null or undefined
            assertParamExists('scoreControllerCreate', 'createScoreDto', createScoreDto)
            const localVarPath = `/api/scores`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createScoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {BulkSoleCreateScoreDto} bulkSoleCreateScoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scoreControllerCreateFartyClaw: async (bulkSoleCreateScoreDto: BulkSoleCreateScoreDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'bulkSoleCreateScoreDto' is not null or undefined
            assertParamExists('scoreControllerCreateFartyClaw', 'bulkSoleCreateScoreDto', bulkSoleCreateScoreDto)
            const localVarPath = `/api/scores/farty-claw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(bulkSoleCreateScoreDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ScoresApi - functional programming interface
 * @export
 */
export const ScoresApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ScoresApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateScoreDto} createScoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scoreControllerCreate(createScoreDto: CreateScoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Score>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scoreControllerCreate(createScoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScoresApi.scoreControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {BulkSoleCreateScoreDto} bulkSoleCreateScoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async scoreControllerCreateFartyClaw(bulkSoleCreateScoreDto: BulkSoleCreateScoreDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Score>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.scoreControllerCreateFartyClaw(bulkSoleCreateScoreDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ScoresApi.scoreControllerCreateFartyClaw']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ScoresApi - factory interface
 * @export
 */
export const ScoresApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ScoresApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateScoreDto} createScoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scoreControllerCreate(createScoreDto: CreateScoreDto, options?: any): AxiosPromise<Score> {
            return localVarFp.scoreControllerCreate(createScoreDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {BulkSoleCreateScoreDto} bulkSoleCreateScoreDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        scoreControllerCreateFartyClaw(bulkSoleCreateScoreDto: BulkSoleCreateScoreDto, options?: any): AxiosPromise<Array<Score>> {
            return localVarFp.scoreControllerCreateFartyClaw(bulkSoleCreateScoreDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ScoresApi - object-oriented interface
 * @export
 * @class ScoresApi
 * @extends {BaseAPI}
 */
export class ScoresApi extends BaseAPI {
    /**
     * 
     * @param {CreateScoreDto} createScoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScoresApi
     */
    public scoreControllerCreate(createScoreDto: CreateScoreDto, options?: RawAxiosRequestConfig) {
        return ScoresApiFp(this.configuration).scoreControllerCreate(createScoreDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {BulkSoleCreateScoreDto} bulkSoleCreateScoreDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ScoresApi
     */
    public scoreControllerCreateFartyClaw(bulkSoleCreateScoreDto: BulkSoleCreateScoreDto, options?: RawAxiosRequestConfig) {
        return ScoresApiFp(this.configuration).scoreControllerCreateFartyClaw(bulkSoleCreateScoreDto, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TasksApi - axios parameter creator
 * @export
 */
export const TasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('taskControllerFindOne', 'id', id)
            const localVarPath = `/api/tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TasksApi - functional programming interface
 * @export
 */
export const TasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Task>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.taskControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async taskControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Task>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.taskControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TasksApi.taskControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TasksApi - factory interface
 * @export
 */
export const TasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TasksApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerFindAll(options?: any): AxiosPromise<Array<Task>> {
            return localVarFp.taskControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        taskControllerFindOne(id: string, options?: any): AxiosPromise<Task> {
            return localVarFp.taskControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TasksApi - object-oriented interface
 * @export
 * @class TasksApi
 * @extends {BaseAPI}
 */
export class TasksApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public taskControllerFindAll(options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).taskControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TasksApi
     */
    public taskControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return TasksApiFp(this.configuration).taskControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * TwitterApi - axios parameter creator
 * @export
 */
export const TwitterApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twitterControllerGetOAuthLink: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/twitter/oauth-link`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TwitterApi - functional programming interface
 * @export
 */
export const TwitterApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TwitterApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async twitterControllerGetOAuthLink(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OAuthResponseDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.twitterControllerGetOAuthLink(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['TwitterApi.twitterControllerGetOAuthLink']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * TwitterApi - factory interface
 * @export
 */
export const TwitterApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TwitterApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        twitterControllerGetOAuthLink(options?: any): AxiosPromise<OAuthResponseDto> {
            return localVarFp.twitterControllerGetOAuthLink(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TwitterApi - object-oriented interface
 * @export
 * @class TwitterApi
 * @extends {BaseAPI}
 */
export class TwitterApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TwitterApi
     */
    public twitterControllerGetOAuthLink(options?: RawAxiosRequestConfig) {
        return TwitterApiFp(this.configuration).twitterControllerGetOAuthLink(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UserTasksApi - axios parameter creator
 * @export
 */
export const UserTasksApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserTaskDto} createUserTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerCreate: async (createUserTaskDto: CreateUserTaskDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserTaskDto' is not null or undefined
            assertParamExists('userTaskControllerCreate', 'createUserTaskDto', createUserTaskDto)
            const localVarPath = `/api/user-tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserTaskDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerFindAll: async (userId?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/user-tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (userId !== undefined) {
                localVarQueryParameter['userId'] = userId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerFindOne: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userTaskControllerFindOne', 'id', id)
            const localVarPath = `/api/user-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerRemove: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('userTaskControllerRemove', 'id', id)
            const localVarPath = `/api/user-tasks/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UserTasksApi - functional programming interface
 * @export
 */
export const UserTasksApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UserTasksApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserTaskDto} createUserTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTaskControllerCreate(createUserTaskDto: CreateUserTaskDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTaskControllerCreate(createUserTaskDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTasksApi.userTaskControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTaskControllerFindAll(userId?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<UserTask>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTaskControllerFindAll(userId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTasksApi.userTaskControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTaskControllerFindOne(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTaskControllerFindOne(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTasksApi.userTaskControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userTaskControllerRemove(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserTask>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userTaskControllerRemove(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UserTasksApi.userTaskControllerRemove']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UserTasksApi - factory interface
 * @export
 */
export const UserTasksApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UserTasksApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserTaskDto} createUserTaskDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerCreate(createUserTaskDto: CreateUserTaskDto, options?: any): AxiosPromise<UserTask> {
            return localVarFp.userTaskControllerCreate(createUserTaskDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [userId] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerFindAll(userId?: string, options?: any): AxiosPromise<Array<UserTask>> {
            return localVarFp.userTaskControllerFindAll(userId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerFindOne(id: string, options?: any): AxiosPromise<UserTask> {
            return localVarFp.userTaskControllerFindOne(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userTaskControllerRemove(id: string, options?: any): AxiosPromise<UserTask> {
            return localVarFp.userTaskControllerRemove(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UserTasksApi - object-oriented interface
 * @export
 * @class UserTasksApi
 * @extends {BaseAPI}
 */
export class UserTasksApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserTaskDto} createUserTaskDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public userTaskControllerCreate(createUserTaskDto: CreateUserTaskDto, options?: RawAxiosRequestConfig) {
        return UserTasksApiFp(this.configuration).userTaskControllerCreate(createUserTaskDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [userId] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public userTaskControllerFindAll(userId?: string, options?: RawAxiosRequestConfig) {
        return UserTasksApiFp(this.configuration).userTaskControllerFindAll(userId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public userTaskControllerFindOne(id: string, options?: RawAxiosRequestConfig) {
        return UserTasksApiFp(this.configuration).userTaskControllerFindOne(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UserTasksApi
     */
    public userTaskControllerRemove(id: string, options?: RawAxiosRequestConfig) {
        return UserTasksApiFp(this.configuration).userTaskControllerRemove(id, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate: async (createUserDto: CreateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'createUserDto' is not null or undefined
            assertParamExists('userControllerCreate', 'createUserDto', createUserDto)
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(createUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAll: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAllInvitedCount: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/invited-count`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne: async (address: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerFindOne', 'address', address)
            const localVarPath = `/api/users/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGenerateInviteCode: async (address: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerGenerateInviteCode', 'address', address)
            const localVarPath = `/api/users/invite-code{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetTopRanks: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/users/top-ranks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserRank: async (address: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerGetUserRank', 'address', address)
            const localVarPath = `/api/users/user-rank/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SignDto} signDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLoginUser: async (signDto: SignDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'signDto' is not null or undefined
            assertParamExists('userControllerLoginUser', 'signDto', signDto)
            const localVarPath = `/api/users/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(signDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} address 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate: async (address: string, updateUserDto: UpdateUserDto, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('userControllerUpdate', 'address', address)
            // verify required parameter 'updateUserDto' is not null or undefined
            assertParamExists('userControllerUpdate', 'updateUserDto', updateUserDto)
            const localVarPath = `/api/users/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateUserDto, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerCreate(createUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerCreate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindAll(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindAll(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerFindAll']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindAllInvitedCount(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindAllInvitedCount(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerFindAllInvitedCount']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerFindOne(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerFindOne(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerFindOne']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGenerateInviteCode(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGenerateInviteCode(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGenerateInviteCode']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetTopRanks(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<User>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetTopRanks(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGetTopRanks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerGetUserRank(address: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<number>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerGetUserRank(address, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerGetUserRank']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SignDto} signDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerLoginUser(signDto: SignDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerLoginUser(signDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerLoginUser']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} address 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async userControllerUpdate(address: string, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<User>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.userControllerUpdate(address, updateUserDto, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['UsersApi.userControllerUpdate']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @param {CreateUserDto} createUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerCreate(createUserDto: CreateUserDto, options?: any): AxiosPromise<User> {
            return localVarFp.userControllerCreate(createUserDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAll(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.userControllerFindAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindAllInvitedCount(options?: any): AxiosPromise<number> {
            return localVarFp.userControllerFindAllInvitedCount(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerFindOne(address: string, options?: any): AxiosPromise<User> {
            return localVarFp.userControllerFindOne(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGenerateInviteCode(address: string, options?: any): AxiosPromise<string> {
            return localVarFp.userControllerGenerateInviteCode(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetTopRanks(options?: any): AxiosPromise<Array<User>> {
            return localVarFp.userControllerGetTopRanks(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerGetUserRank(address: string, options?: any): AxiosPromise<number> {
            return localVarFp.userControllerGetUserRank(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {SignDto} signDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerLoginUser(signDto: SignDto, options?: any): AxiosPromise<void> {
            return localVarFp.userControllerLoginUser(signDto, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} address 
         * @param {UpdateUserDto} updateUserDto 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        userControllerUpdate(address: string, updateUserDto: UpdateUserDto, options?: any): AxiosPromise<User> {
            return localVarFp.userControllerUpdate(address, updateUserDto, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @param {CreateUserDto} createUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerCreate(createUserDto: CreateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerCreate(createUserDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerFindAll(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerFindAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerFindAllInvitedCount(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerFindAllInvitedCount(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerFindOne(address: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerFindOne(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGenerateInviteCode(address: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGenerateInviteCode(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGetTopRanks(options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGetTopRanks(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerGetUserRank(address: string, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerGetUserRank(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {SignDto} signDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerLoginUser(signDto: SignDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerLoginUser(signDto, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} address 
     * @param {UpdateUserDto} updateUserDto 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public userControllerUpdate(address: string, updateUserDto: UpdateUserDto, options?: RawAxiosRequestConfig) {
        return UsersApiFp(this.configuration).userControllerUpdate(address, updateUserDto, options).then((request) => request(this.axios, this.basePath));
    }
}



